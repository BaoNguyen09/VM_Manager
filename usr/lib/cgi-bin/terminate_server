#! /usr/bin/python3

import cgi
import os
import config
from pydo import Client
from utils import *

def terminate_server(primary_key: str, user: str):
    try:
        if (not primary_key.isnumeric()):
            raise ValueError("Fields 'id' must be a valid numeric string")
        
        client = Client(token=config.DO_API_TOKEN)

        db = get_db_connection()
        cursor = db.cursor()
        # delete that server instance in the database
        cursor.execute("SELECT instance_id, owner FROM servers WHERE id = %s;", 
                       (primary_key, ))
        result = cursor.fetchone()
        instance_id = result[0] if result else None
        owner = result[1] if result else None

        if instance_id is None or not owner:
            raise ValueError("This id doesn't exist in the database")
        
        if owner != user: # Validate ownership before terminating
            print_status_403("This user doesn't have access to this server")
            return

        db.commit()
        cursor.close()
        db.close()

        resp = client.droplets.destroy(droplet_id=int(instance_id))
        if resp: # if the operation fails, it will return a response body
            print_status_500(resp["message"])
            return
        # Remove this server from db
        if primary_key and primary_key.isnumeric():
            remove_server_from_db(primary_key)
        return

    except ValueError as e:
        print_status_400(str(e))

def remove_server_from_db(primary_key: str):
    try:
        db = get_db_connection()
        cursor = db.cursor()
        # delete that server instance in the database
        cursor.execute("DELETE FROM servers WHERE id = %s;", 
                       (primary_key, ))

        db.commit()
        cursor.close()
        db.close()

        print_redirect_300("cgi-bin/home")

    except Exception as e:
        print_status_500(str(e))

def main():
    # extract basic request info
    request_method = os.environ["REQUEST_METHOD"]
    extra_path = os.environ.get("PATH_INFO", "").lstrip("/")

    # Check user field in cookie
    user = get_authenticated_user()
    if not user: # Redirect to login
        print_redirect_300("login.html")
        return

    if request_method == "POST" or request_method == "GET": # read query parameter case of GET/POST method
        form = cgi.FieldStorage()
        primary_key = form.getvalue("id", "")
        terminate_server(primary_key, user)
    else:
        print_status_405(extra_path, request_method)
    
if __name__ == "__main__":
    main()


